
HUD2014.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000d42  00000dd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010c  0080010c  00000de2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001102  00000000  00000000  00000f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000590  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c47  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000224  00000000  00000000  000031fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000307  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006bc  00000000  00000000  00003727  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003de3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c3       	rjmp	.+1916   	; 0x7ae <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	60 c0       	rjmp	.+192    	; 0x12a <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f4 d1       	rcall	.+1000   	; 0x4ac <main>
  c4:	3c c6       	rjmp	.+3192   	; 0xd3e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_Init>:
//#define Sensor_power_PORT PORTB
//#define CDS_power 6

void ADC_Init(void){
	//Sensor_power_DDR  |= 1 << CDS_power;
	ADMUX  = (1<<REFS1)|(1<<REFS0);                                 // select ADC0 with external AREF
  c8:	80 ec       	ldi	r24, 0xC0	; 192
  ca:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);                                // ADC enable, 125kHz
  cc:	87 e8       	ldi	r24, 0x87	; 135
  ce:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	81 ee       	ldi	r24, 0xE1	; 225
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <ADC_Init+0xc>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <ADC_Value>:
	_delay_us(200);
}
int ADC_Value(void){
  dc:	40 e1       	ldi	r20, 0x10	; 16
	char i;
	int sum=0;
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
	//Sensor_power_PORT |= 1 << CDS_power;
	for(i=0;i<16;i++){
			ADCSRA |= (1<<ADSC);                        // ADC start
  e2:	36 9a       	sbi	0x06, 6	; 6
			while((ADCSRA & (1<<ADIF)) != 0x10);
  e4:	34 9b       	sbis	0x06, 4	; 6
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <ADC_Value+0x8>
			sum += ADCL + ADCH*256;               // add A/D result 16 times
  e8:	54 b1       	in	r21, 0x04	; 4
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	98 2f       	mov	r25, r24
  f0:	88 27       	eor	r24, r24
  f2:	85 0f       	add	r24, r21
  f4:	91 1d       	adc	r25, r1
  f6:	28 0f       	add	r18, r24
  f8:	39 1f       	adc	r19, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	5f ef       	ldi	r21, 0xFF	; 255
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	51 50       	subi	r21, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <ADC_Value+0x24>
 108:	00 c0       	rjmp	.+0      	; 0x10a <ADC_Value+0x2e>
 10a:	00 00       	nop
 10c:	41 50       	subi	r20, 0x01	; 1
}
int ADC_Value(void){
	char i;
	int sum=0;
	//Sensor_power_PORT |= 1 << CDS_power;
	for(i=0;i<16;i++){
 10e:	49 f7       	brne	.-46     	; 0xe2 <ADC_Value+0x6>
			ADCSRA |= (1<<ADSC);                        // ADC start
			while((ADCSRA & (1<<ADIF)) != 0x10);
			sum += ADCL + ADCH*256;               // add A/D result 16 times
			_delay_ms(50);
		}
	return sum/16;
 110:	c9 01       	movw	r24, r18
 112:	99 23       	and	r25, r25
 114:	0c f4       	brge	.+2      	; 0x118 <ADC_Value+0x3c>
 116:	0f 96       	adiw	r24, 0x0f	; 15
}
 118:	95 95       	asr	r25
 11a:	87 95       	ror	r24
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
 120:	95 95       	asr	r25
 122:	87 95       	ror	r24
 124:	95 95       	asr	r25
 126:	87 95       	ror	r24
 128:	08 95       	ret

0000012a <__vector_26>:
FND_6, FND_7, FND_8, FND_9};
volatile char out_mod;
volatile char red_flag, green_flag, blue_flag;

SIGNAL( TIMER3_COMPA_vect)   //인터럽트 서비스 루틴 2ms 간격
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	0b b6       	in	r0, 0x3b	; 59
 136:	0f 92       	push	r0
 138:	2f 93       	push	r18
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	FND_flag++;
 142:	80 91 0f 01 	lds	r24, 0x010F
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 0f 01 	sts	0x010F, r24
	if(FND_flag >= 4)FND_flag = 0;
 14c:	80 91 0f 01 	lds	r24, 0x010F
 150:	84 30       	cpi	r24, 0x04	; 4
 152:	10 f0       	brcs	.+4      	; 0x158 <__vector_26+0x2e>
 154:	10 92 0f 01 	sts	0x010F, r1
	FND_CONTROL_PORT = ~(0x80>>FND_flag);
 158:	20 91 0f 01 	lds	r18, 0x010F
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <__vector_26+0x3c>
 162:	95 95       	asr	r25
 164:	87 95       	ror	r24
 166:	2a 95       	dec	r18
 168:	e2 f7       	brpl	.-8      	; 0x162 <__vector_26+0x38>
 16a:	80 95       	com	r24
 16c:	85 bb       	out	0x15, r24	; 21
	if(FND_flag == 3 && out_mod == 1)FND_DATABUS_PORT = 0b01011011;
 16e:	80 91 0f 01 	lds	r24, 0x010F
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	39 f4       	brne	.+14     	; 0x184 <__vector_26+0x5a>
 176:	80 91 0a 01 	lds	r24, 0x010A
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	19 f4       	brne	.+6      	; 0x184 <__vector_26+0x5a>
 17e:	8b e5       	ldi	r24, 0x5B	; 91
 180:	8b bb       	out	0x1b, r24	; 27
 182:	29 c0       	rjmp	.+82     	; 0x1d6 <__vector_26+0xac>
	else if(FND_flag == 2 && out_mod == 1){
 184:	80 91 0f 01 	lds	r24, 0x010F
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	69 f4       	brne	.+26     	; 0x1a6 <__vector_26+0x7c>
 18c:	80 91 0a 01 	lds	r24, 0x010A
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	49 f4       	brne	.+18     	; 0x1a6 <__vector_26+0x7c>
		FND_DATABUS_PORT = FND_Data[FND_flag] | 0x20;
 194:	e0 91 0f 01 	lds	r30, 0x010F
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e0 5f       	subi	r30, 0xF0	; 240
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	80 81       	ld	r24, Z
 1a0:	80 62       	ori	r24, 0x20	; 32
 1a2:	8b bb       	out	0x1b, r24	; 27
 1a4:	18 c0       	rjmp	.+48     	; 0x1d6 <__vector_26+0xac>
	}
	else if(FND_flag == 3 && out_mod == 2){
 1a6:	80 91 0f 01 	lds	r24, 0x010F
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	69 f4       	brne	.+26     	; 0x1c8 <__vector_26+0x9e>
 1ae:	80 91 0a 01 	lds	r24, 0x010A
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	49 f4       	brne	.+18     	; 0x1c8 <__vector_26+0x9e>
		FND_DATABUS_PORT = FND_Data[FND_flag] | 0x20;
 1b6:	e0 91 0f 01 	lds	r30, 0x010F
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	e0 5f       	subi	r30, 0xF0	; 240
 1be:	fe 4f       	sbci	r31, 0xFE	; 254
 1c0:	80 81       	ld	r24, Z
 1c2:	80 62       	ori	r24, 0x20	; 32
 1c4:	8b bb       	out	0x1b, r24	; 27
 1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <__vector_26+0xac>
	}
	else FND_DATABUS_PORT = FND_Data[FND_flag];
 1c8:	e0 91 0f 01 	lds	r30, 0x010F
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	e0 5f       	subi	r30, 0xF0	; 240
 1d0:	fe 4f       	sbci	r31, 0xFE	; 254
 1d2:	80 81       	ld	r24, Z
 1d4:	8b bb       	out	0x1b, r24	; 27
	if(blue_flag)OCR1A -= 2;
 1d6:	80 91 0c 01 	lds	r24, 0x010C
 1da:	88 23       	and	r24, r24
 1dc:	31 f0       	breq	.+12     	; 0x1ea <__vector_26+0xc0>
 1de:	8a b5       	in	r24, 0x2a	; 42
 1e0:	9b b5       	in	r25, 0x2b	; 43
 1e2:	02 97       	sbiw	r24, 0x02	; 2
 1e4:	9b bd       	out	0x2b, r25	; 43
 1e6:	8a bd       	out	0x2a, r24	; 42
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <__vector_26+0xca>
	else OCR1A += 2;
 1ea:	8a b5       	in	r24, 0x2a	; 42
 1ec:	9b b5       	in	r25, 0x2b	; 43
 1ee:	02 96       	adiw	r24, 0x02	; 2
 1f0:	9b bd       	out	0x2b, r25	; 43
 1f2:	8a bd       	out	0x2a, r24	; 42
	if(green_flag)OCR1B -= 3;
 1f4:	80 91 0d 01 	lds	r24, 0x010D
 1f8:	88 23       	and	r24, r24
 1fa:	31 f0       	breq	.+12     	; 0x208 <__vector_26+0xde>
 1fc:	88 b5       	in	r24, 0x28	; 40
 1fe:	99 b5       	in	r25, 0x29	; 41
 200:	03 97       	sbiw	r24, 0x03	; 3
 202:	99 bd       	out	0x29, r25	; 41
 204:	88 bd       	out	0x28, r24	; 40
 206:	05 c0       	rjmp	.+10     	; 0x212 <__vector_26+0xe8>
	else OCR1B += 3;
 208:	88 b5       	in	r24, 0x28	; 40
 20a:	99 b5       	in	r25, 0x29	; 41
 20c:	03 96       	adiw	r24, 0x03	; 3
 20e:	99 bd       	out	0x29, r25	; 41
 210:	88 bd       	out	0x28, r24	; 40
	if(red_flag)OCR1C -= 5;
 212:	80 91 0e 01 	lds	r24, 0x010E
 216:	88 23       	and	r24, r24
 218:	41 f0       	breq	.+16     	; 0x22a <__vector_26+0x100>
 21a:	e8 e7       	ldi	r30, 0x78	; 120
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	91 81       	ldd	r25, Z+1	; 0x01
 222:	05 97       	sbiw	r24, 0x05	; 5
 224:	91 83       	std	Z+1, r25	; 0x01
 226:	80 83       	st	Z, r24
 228:	07 c0       	rjmp	.+14     	; 0x238 <__vector_26+0x10e>
	else OCR1C += 5;
 22a:	e8 e7       	ldi	r30, 0x78	; 120
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	91 81       	ldd	r25, Z+1	; 0x01
 232:	05 96       	adiw	r24, 0x05	; 5
 234:	91 83       	std	Z+1, r25	; 0x01
 236:	80 83       	st	Z, r24
	if(OCR1A >= 7000 || OCR1A <= 1)blue_flag ^= 1;
 238:	8a b5       	in	r24, 0x2a	; 42
 23a:	9b b5       	in	r25, 0x2b	; 43
 23c:	88 35       	cpi	r24, 0x58	; 88
 23e:	9b 41       	sbci	r25, 0x1B	; 27
 240:	20 f4       	brcc	.+8      	; 0x24a <__vector_26+0x120>
 242:	8a b5       	in	r24, 0x2a	; 42
 244:	9b b5       	in	r25, 0x2b	; 43
 246:	02 97       	sbiw	r24, 0x02	; 2
 248:	30 f4       	brcc	.+12     	; 0x256 <__vector_26+0x12c>
 24a:	90 91 0c 01 	lds	r25, 0x010C
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	89 27       	eor	r24, r25
 252:	80 93 0c 01 	sts	0x010C, r24
	if(OCR1B >= 7000 || OCR1B <= 1)green_flag ^= 1;
 256:	88 b5       	in	r24, 0x28	; 40
 258:	99 b5       	in	r25, 0x29	; 41
 25a:	88 35       	cpi	r24, 0x58	; 88
 25c:	9b 41       	sbci	r25, 0x1B	; 27
 25e:	20 f4       	brcc	.+8      	; 0x268 <__vector_26+0x13e>
 260:	88 b5       	in	r24, 0x28	; 40
 262:	99 b5       	in	r25, 0x29	; 41
 264:	02 97       	sbiw	r24, 0x02	; 2
 266:	30 f4       	brcc	.+12     	; 0x274 <__vector_26+0x14a>
 268:	90 91 0d 01 	lds	r25, 0x010D
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	89 27       	eor	r24, r25
 270:	80 93 0d 01 	sts	0x010D, r24
	if(OCR1C >= 7000 || OCR1C <= 1)red_flag ^= 1;
 274:	80 91 78 00 	lds	r24, 0x0078
 278:	90 91 79 00 	lds	r25, 0x0079
 27c:	88 35       	cpi	r24, 0x58	; 88
 27e:	9b 41       	sbci	r25, 0x1B	; 27
 280:	30 f4       	brcc	.+12     	; 0x28e <__vector_26+0x164>
 282:	80 91 78 00 	lds	r24, 0x0078
 286:	90 91 79 00 	lds	r25, 0x0079
 28a:	02 97       	sbiw	r24, 0x02	; 2
 28c:	30 f4       	brcc	.+12     	; 0x29a <__vector_26+0x170>
 28e:	90 91 0e 01 	lds	r25, 0x010E
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	89 27       	eor	r24, r25
 296:	80 93 0e 01 	sts	0x010E, r24
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0b be       	out	0x3b, r0	; 59
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <FND_Init>:

void FND_Init(void){	
	FND_DATABUS_DDR = 0xFF;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	8a bb       	out	0x1a, r24	; 26
	FND_CONTROL_DDR |= 0xF0;
 2b6:	84 b3       	in	r24, 0x14	; 20
 2b8:	80 6f       	ori	r24, 0xF0	; 240
 2ba:	84 bb       	out	0x14, r24	; 20
	FND_DATABUS_PORT = 0x00;
 2bc:	1b ba       	out	0x1b, r1	; 27
	FND_CONTROL_PORT = 0xF0;
 2be:	80 ef       	ldi	r24, 0xF0	; 240
 2c0:	85 bb       	out	0x15, r24	; 21
	Timer3A_Init(1);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	dc c2       	rjmp	.+1464   	; 0x880 <Timer3A_Init>
 2c8:	08 95       	ret

000002ca <FND_UPDATE>:
}

void FND_UPDATE(unsigned int data){
 2ca:	ac 01       	movw	r20, r24
	FND_Data[0] = FND_Font[data % 10000 / 1000];
 2cc:	9c 01       	movw	r18, r24
 2ce:	32 95       	swap	r19
 2d0:	22 95       	swap	r18
 2d2:	2f 70       	andi	r18, 0x0F	; 15
 2d4:	23 27       	eor	r18, r19
 2d6:	3f 70       	andi	r19, 0x0F	; 15
 2d8:	23 27       	eor	r18, r19
 2da:	a7 e4       	ldi	r26, 0x47	; 71
 2dc:	b3 e0       	ldi	r27, 0x03	; 3
 2de:	02 d5       	rcall	.+2564   	; 0xce4 <__umulhisi3>
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	96 95       	lsr	r25
 2e6:	87 95       	ror	r24
 2e8:	96 95       	lsr	r25
 2ea:	87 95       	ror	r24
 2ec:	60 e1       	ldi	r22, 0x10	; 16
 2ee:	77 e2       	ldi	r23, 0x27	; 39
 2f0:	86 9f       	mul	r24, r22
 2f2:	90 01       	movw	r18, r0
 2f4:	87 9f       	mul	r24, r23
 2f6:	30 0d       	add	r19, r0
 2f8:	96 9f       	mul	r25, r22
 2fa:	30 0d       	add	r19, r0
 2fc:	11 24       	eor	r1, r1
 2fe:	ca 01       	movw	r24, r20
 300:	82 1b       	sub	r24, r18
 302:	93 0b       	sbc	r25, r19
 304:	9c 01       	movw	r18, r24
 306:	36 95       	lsr	r19
 308:	27 95       	ror	r18
 30a:	36 95       	lsr	r19
 30c:	27 95       	ror	r18
 30e:	36 95       	lsr	r19
 310:	27 95       	ror	r18
 312:	a5 ec       	ldi	r26, 0xC5	; 197
 314:	b0 e2       	ldi	r27, 0x20	; 32
 316:	e6 d4       	rcall	.+2508   	; 0xce4 <__umulhisi3>
 318:	92 95       	swap	r25
 31a:	82 95       	swap	r24
 31c:	8f 70       	andi	r24, 0x0F	; 15
 31e:	89 27       	eor	r24, r25
 320:	9f 70       	andi	r25, 0x0F	; 15
 322:	89 27       	eor	r24, r25
 324:	fc 01       	movw	r30, r24
 326:	e0 50       	subi	r30, 0x00	; 0
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	80 81       	ld	r24, Z
 32c:	80 93 10 01 	sts	0x0110, r24
	FND_Data[1] = FND_Font[data % 1000 / 100];
 330:	9a 01       	movw	r18, r20
 332:	36 95       	lsr	r19
 334:	27 95       	ror	r18
 336:	36 95       	lsr	r19
 338:	27 95       	ror	r18
 33a:	36 95       	lsr	r19
 33c:	27 95       	ror	r18
 33e:	d2 d4       	rcall	.+2468   	; 0xce4 <__umulhisi3>
 340:	92 95       	swap	r25
 342:	82 95       	swap	r24
 344:	8f 70       	andi	r24, 0x0F	; 15
 346:	89 27       	eor	r24, r25
 348:	9f 70       	andi	r25, 0x0F	; 15
 34a:	89 27       	eor	r24, r25
 34c:	68 ee       	ldi	r22, 0xE8	; 232
 34e:	73 e0       	ldi	r23, 0x03	; 3
 350:	86 9f       	mul	r24, r22
 352:	90 01       	movw	r18, r0
 354:	87 9f       	mul	r24, r23
 356:	30 0d       	add	r19, r0
 358:	96 9f       	mul	r25, r22
 35a:	30 0d       	add	r19, r0
 35c:	11 24       	eor	r1, r1
 35e:	ca 01       	movw	r24, r20
 360:	82 1b       	sub	r24, r18
 362:	93 0b       	sbc	r25, r19
 364:	9c 01       	movw	r18, r24
 366:	36 95       	lsr	r19
 368:	27 95       	ror	r18
 36a:	36 95       	lsr	r19
 36c:	27 95       	ror	r18
 36e:	ab e7       	ldi	r26, 0x7B	; 123
 370:	b4 e1       	ldi	r27, 0x14	; 20
 372:	b8 d4       	rcall	.+2416   	; 0xce4 <__umulhisi3>
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	fc 01       	movw	r30, r24
 37a:	e0 50       	subi	r30, 0x00	; 0
 37c:	ff 4f       	sbci	r31, 0xFF	; 255
 37e:	80 81       	ld	r24, Z
 380:	80 93 11 01 	sts	0x0111, r24
	FND_Data[2] = FND_Font[data % 100 / 10];
 384:	9a 01       	movw	r18, r20
 386:	36 95       	lsr	r19
 388:	27 95       	ror	r18
 38a:	36 95       	lsr	r19
 38c:	27 95       	ror	r18
 38e:	aa d4       	rcall	.+2388   	; 0xce4 <__umulhisi3>
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	64 e6       	ldi	r22, 0x64	; 100
 396:	68 9f       	mul	r22, r24
 398:	90 01       	movw	r18, r0
 39a:	69 9f       	mul	r22, r25
 39c:	30 0d       	add	r19, r0
 39e:	11 24       	eor	r1, r1
 3a0:	ca 01       	movw	r24, r20
 3a2:	82 1b       	sub	r24, r18
 3a4:	93 0b       	sbc	r25, r19
 3a6:	9c 01       	movw	r18, r24
 3a8:	ad ec       	ldi	r26, 0xCD	; 205
 3aa:	bc ec       	ldi	r27, 0xCC	; 204
 3ac:	9b d4       	rcall	.+2358   	; 0xce4 <__umulhisi3>
 3ae:	96 95       	lsr	r25
 3b0:	87 95       	ror	r24
 3b2:	96 95       	lsr	r25
 3b4:	87 95       	ror	r24
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	fc 01       	movw	r30, r24
 3bc:	e0 50       	subi	r30, 0x00	; 0
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	80 81       	ld	r24, Z
 3c2:	80 93 12 01 	sts	0x0112, r24
	FND_Data[3] = FND_Font[data % 10];
 3c6:	9a 01       	movw	r18, r20
 3c8:	8d d4       	rcall	.+2330   	; 0xce4 <__umulhisi3>
 3ca:	96 95       	lsr	r25
 3cc:	87 95       	ror	r24
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	96 95       	lsr	r25
 3d4:	87 95       	ror	r24
 3d6:	9c 01       	movw	r18, r24
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	82 0f       	add	r24, r18
 3ea:	93 1f       	adc	r25, r19
 3ec:	9a 01       	movw	r18, r20
 3ee:	28 1b       	sub	r18, r24
 3f0:	39 0b       	sbc	r19, r25
 3f2:	f9 01       	movw	r30, r18
 3f4:	e0 50       	subi	r30, 0x00	; 0
 3f6:	ff 4f       	sbci	r31, 0xFF	; 255
 3f8:	80 81       	ld	r24, Z
 3fa:	80 93 13 01 	sts	0x0113, r24
 3fe:	08 95       	ret

00000400 <FND_TempOut>:
}

void FND_TempOut(signed int data){
	if(data < 0)FND_Data[0] = 0b10000000;
 400:	99 23       	and	r25, r25
 402:	b4 f4       	brge	.+44     	; 0x430 <FND_TempOut+0x30>
 404:	20 e8       	ldi	r18, 0x80	; 128
 406:	20 93 10 01 	sts	0x0110, r18
	else FND_Data[0] = 0;
	if(data < 0)FND_Data[1] = FND_Font[data*(-1) / 10];
 40a:	91 95       	neg	r25
 40c:	81 95       	neg	r24
 40e:	91 09       	sbc	r25, r1
 410:	6a e0       	ldi	r22, 0x0A	; 10
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	32 d4       	rcall	.+2148   	; 0xc7a <__divmodhi4>
 416:	fb 01       	movw	r30, r22
 418:	e0 50       	subi	r30, 0x00	; 0
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	20 81       	ld	r18, Z
 41e:	20 93 11 01 	sts	0x0111, r18
	else FND_Data[1] = FND_Font[data / 10];
	if(data < 0)FND_Data[2] = FND_Font[data*(-1) % 10];
 422:	fc 01       	movw	r30, r24
 424:	e0 50       	subi	r30, 0x00	; 0
 426:	ff 4f       	sbci	r31, 0xFF	; 255
 428:	80 81       	ld	r24, Z
 42a:	80 93 12 01 	sts	0x0112, r24
 42e:	11 c0       	rjmp	.+34     	; 0x452 <FND_TempOut+0x52>
	FND_Data[3] = FND_Font[data % 10];
}

void FND_TempOut(signed int data){
	if(data < 0)FND_Data[0] = 0b10000000;
	else FND_Data[0] = 0;
 430:	10 92 10 01 	sts	0x0110, r1
	if(data < 0)FND_Data[1] = FND_Font[data*(-1) / 10];
	else FND_Data[1] = FND_Font[data / 10];
 434:	6a e0       	ldi	r22, 0x0A	; 10
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	20 d4       	rcall	.+2112   	; 0xc7a <__divmodhi4>
 43a:	fb 01       	movw	r30, r22
 43c:	e0 50       	subi	r30, 0x00	; 0
 43e:	ff 4f       	sbci	r31, 0xFF	; 255
 440:	20 81       	ld	r18, Z
 442:	20 93 11 01 	sts	0x0111, r18
	if(data < 0)FND_Data[2] = FND_Font[data*(-1) % 10];
	else FND_Data[2] = FND_Font[data % 10];
 446:	fc 01       	movw	r30, r24
 448:	e0 50       	subi	r30, 0x00	; 0
 44a:	ff 4f       	sbci	r31, 0xFF	; 255
 44c:	80 81       	ld	r24, Z
 44e:	80 93 12 01 	sts	0x0112, r24
	FND_Data[3] = 0b11010000;
 452:	80 ed       	ldi	r24, 0xD0	; 208
 454:	80 93 13 01 	sts	0x0113, r24
 458:	08 95       	ret

0000045a <FND_HumiOut>:
}

void FND_HumiOut(unsigned int data){
 45a:	fc 01       	movw	r30, r24
	FND_Data[0] = 0;
 45c:	10 92 10 01 	sts	0x0110, r1
	FND_Data[1] = 0;
 460:	10 92 11 01 	sts	0x0111, r1
	FND_Data[2] = FND_Font[data / 10];
 464:	9c 01       	movw	r18, r24
 466:	ad ec       	ldi	r26, 0xCD	; 205
 468:	bc ec       	ldi	r27, 0xCC	; 204
 46a:	3c d4       	rcall	.+2168   	; 0xce4 <__umulhisi3>
 46c:	ac 01       	movw	r20, r24
 46e:	56 95       	lsr	r21
 470:	47 95       	ror	r20
 472:	56 95       	lsr	r21
 474:	47 95       	ror	r20
 476:	56 95       	lsr	r21
 478:	47 95       	ror	r20
 47a:	da 01       	movw	r26, r20
 47c:	a0 50       	subi	r26, 0x00	; 0
 47e:	bf 4f       	sbci	r27, 0xFF	; 255
 480:	8c 91       	ld	r24, X
 482:	80 93 12 01 	sts	0x0112, r24
	FND_Data[3] = FND_Font[data % 10];
 486:	ca 01       	movw	r24, r20
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	44 0f       	add	r20, r20
 48e:	55 1f       	adc	r21, r21
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	44 0f       	add	r20, r20
 496:	55 1f       	adc	r21, r21
 498:	48 0f       	add	r20, r24
 49a:	59 1f       	adc	r21, r25
 49c:	e4 1b       	sub	r30, r20
 49e:	f5 0b       	sbc	r31, r21
 4a0:	e0 50       	subi	r30, 0x00	; 0
 4a2:	ff 4f       	sbci	r31, 0xFF	; 255
 4a4:	80 81       	ld	r24, Z
 4a6:	80 93 13 01 	sts	0x0113, r24
 4aa:	08 95       	ret

000004ac <main>:

volatile char out_mod=1;
int main(void)
{
	
	DDRB = 0xFF;
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00011111;
 4b0:	8f e1       	ldi	r24, 0x1F	; 31
 4b2:	88 bb       	out	0x18, r24	; 24
	
	FND_Init();
 4b4:	fe de       	rcall	.-516    	; 0x2b2 <FND_Init>
	ADC_Init();
 4b6:	08 de       	rcall	.-1008   	; 0xc8 <ADC_Init>
	SHT11Init();
 4b8:	eb d0       	rcall	.+470    	; 0x690 <SHT11Init>
	Timer1A_Init(1);
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	81 d1       	rcall	.+770    	; 0x7c2 <Timer1A_Init>
	OCR1A = 1;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	9b bd       	out	0x2b, r25	; 43
 4c6:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 1;
 4c8:	99 bd       	out	0x29, r25	; 41
 4ca:	88 bd       	out	0x28, r24	; 40
	OCR1C = 1;
 4cc:	90 93 79 00 	sts	0x0079, r25
 4d0:	80 93 78 00 	sts	0x0078, r24
	sei();
 4d4:	78 94       	sei
    while(1)
    {
       FND_UPDATE(1080+(ADC_Value()-547)*23);
 4d6:	07 e1       	ldi	r16, 0x17	; 23
	   out_mod = volt;
 4d8:	11 e0       	ldi	r17, 0x01	; 1
	   _delay_ms(2000);
	   //OCR1B *= 5;
	   FND_TempOut(Get_Temp());
	   out_mod = temperature;
 4da:	d2 e0       	ldi	r29, 0x02	; 2
	   _delay_ms(2000);
	   //OCR1B *= 5;
	   out_mod = humi;
 4dc:	c3 e0       	ldi	r28, 0x03	; 3
	OCR1B = 1;
	OCR1C = 1;
	sei();
    while(1)
    {
       FND_UPDATE(1080+(ADC_Value()-547)*23);
 4de:	fe dd       	rcall	.-1028   	; 0xdc <ADC_Value>
 4e0:	9c 01       	movw	r18, r24
 4e2:	23 52       	subi	r18, 0x23	; 35
 4e4:	32 40       	sbci	r19, 0x02	; 2
 4e6:	02 9f       	mul	r16, r18
 4e8:	c0 01       	movw	r24, r0
 4ea:	03 9f       	mul	r16, r19
 4ec:	90 0d       	add	r25, r0
 4ee:	11 24       	eor	r1, r1
 4f0:	88 5c       	subi	r24, 0xC8	; 200
 4f2:	9b 4f       	sbci	r25, 0xFB	; 251
 4f4:	ea de       	rcall	.-556    	; 0x2ca <FND_UPDATE>
	   out_mod = volt;
 4f6:	10 93 0a 01 	sts	0x010A, r17
 4fa:	2f ef       	ldi	r18, 0xFF	; 255
 4fc:	8f ef       	ldi	r24, 0xFF	; 255
 4fe:	99 e5       	ldi	r25, 0x59	; 89
 500:	21 50       	subi	r18, 0x01	; 1
 502:	80 40       	sbci	r24, 0x00	; 0
 504:	90 40       	sbci	r25, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <main+0x54>
 508:	00 c0       	rjmp	.+0      	; 0x50a <main+0x5e>
 50a:	00 00       	nop
	   _delay_ms(2000);
	   //OCR1B *= 5;
	   FND_TempOut(Get_Temp());
 50c:	c9 d0       	rcall	.+402    	; 0x6a0 <Get_Temp>
 50e:	78 df       	rcall	.-272    	; 0x400 <FND_TempOut>
	   out_mod = temperature;
 510:	d0 93 0a 01 	sts	0x010A, r29
 514:	2f ef       	ldi	r18, 0xFF	; 255
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	99 e5       	ldi	r25, 0x59	; 89
 51a:	21 50       	subi	r18, 0x01	; 1
 51c:	80 40       	sbci	r24, 0x00	; 0
 51e:	90 40       	sbci	r25, 0x00	; 0
 520:	e1 f7       	brne	.-8      	; 0x51a <main+0x6e>
 522:	00 c0       	rjmp	.+0      	; 0x524 <main+0x78>
 524:	00 00       	nop
	   _delay_ms(2000);
	   //OCR1B *= 5;
	   out_mod = humi;
 526:	c0 93 0a 01 	sts	0x010A, r28
	   FND_HumiOut(Get_Humi());
 52a:	ee d0       	rcall	.+476    	; 0x708 <Get_Humi>
 52c:	96 df       	rcall	.-212    	; 0x45a <FND_HumiOut>
 52e:	2f ef       	ldi	r18, 0xFF	; 255
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	99 e5       	ldi	r25, 0x59	; 89
 534:	21 50       	subi	r18, 0x01	; 1
 536:	80 40       	sbci	r24, 0x00	; 0
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <main+0x88>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <main+0x92>
 53e:	00 00       	nop
 540:	ce cf       	rjmp	.-100    	; 0x4de <main+0x32>

00000542 <SHT11TransStart>:
                  ___     ___
SCK :         ___|   |___|   |______
******************************************************************************/
void SHT11TransStart(void)
{
  SHT11_DDR  |= SHT11_DATA;       //DATA-line in output
 542:	89 9a       	sbi	0x11, 1	; 17

  SHT11_PORT |= SHT11_DATA;       //DATA=1
 544:	91 9a       	sbi	0x12, 1	; 18
  SHT11_PORT &= ~SHT11_SCK;       //SCK=0
 546:	90 98       	cbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 548:	8a e0       	ldi	r24, 0x0A	; 10
 54a:	8a 95       	dec	r24
 54c:	f1 f7       	brne	.-4      	; 0x54a <SHT11TransStart+0x8>
  SHT11Delay
  SHT11_PORT |= SHT11_SCK;        //SCK=1
 54e:	90 9a       	sbi	0x12, 0	; 18
 550:	8a e0       	ldi	r24, 0x0A	; 10
 552:	8a 95       	dec	r24
 554:	f1 f7       	brne	.-4      	; 0x552 <SHT11TransStart+0x10>
  SHT11Delay
  SHT11_PORT &= ~SHT11_DATA;      //DATA=0
 556:	91 98       	cbi	0x12, 1	; 18
 558:	8a e0       	ldi	r24, 0x0A	; 10
 55a:	8a 95       	dec	r24
 55c:	f1 f7       	brne	.-4      	; 0x55a <SHT11TransStart+0x18>
  SHT11Delay
  SHT11_PORT &= ~SHT11_SCK;       //SCK=0
 55e:	90 98       	cbi	0x12, 0	; 18
 560:	8a e0       	ldi	r24, 0x0A	; 10
 562:	8a 95       	dec	r24
 564:	f1 f7       	brne	.-4      	; 0x562 <SHT11TransStart+0x20>
  SHT11Delay
  SHT11_PORT |= SHT11_SCK;           //SCK=1
 566:	90 9a       	sbi	0x12, 0	; 18
 568:	8a e0       	ldi	r24, 0x0A	; 10
 56a:	8a 95       	dec	r24
 56c:	f1 f7       	brne	.-4      	; 0x56a <SHT11TransStart+0x28>
  SHT11Delay
  SHT11_PORT |= SHT11_DATA;          //DATA=1
 56e:	91 9a       	sbi	0x12, 1	; 18
 570:	8a e0       	ldi	r24, 0x0A	; 10
 572:	8a 95       	dec	r24
 574:	f1 f7       	brne	.-4      	; 0x572 <SHT11TransStart+0x30>
  SHT11Delay
  SHT11_PORT &= ~SHT11_SCK;          //SCK=0
 576:	90 98       	cbi	0x12, 0	; 18
 578:	8a e0       	ldi	r24, 0x0A	; 10
 57a:	8a 95       	dec	r24
 57c:	f1 f7       	brne	.-4      	; 0x57a <SHT11TransStart+0x38>
 57e:	08 95       	ret

00000580 <SHT11ConnectionReset>:
}
void SHT11ConnectionReset(void)
{
    unsigned char i;
	
	SHT11_PORT |= SHT11_DATA;       //DATA=1
 580:	91 9a       	sbi	0x12, 1	; 18
	SHT11_PORT &= ~SHT11_SCK;       //SCK=0
 582:	90 98       	cbi	0x12, 0	; 18
 584:	8a e0       	ldi	r24, 0x0A	; 10
 586:	8a 95       	dec	r24
 588:	f1 f7       	brne	.-4      	; 0x586 <SHT11ConnectionReset+0x6>
 58a:	89 e0       	ldi	r24, 0x09	; 9
	SHT11Delay
    for(i=0;i<9;i++)
    {
		SHT11_PORT |= SHT11_SCK;           //SCK=1
 58c:	90 9a       	sbi	0x12, 0	; 18
 58e:	9a e0       	ldi	r25, 0x0A	; 10
 590:	9a 95       	dec	r25
 592:	f1 f7       	brne	.-4      	; 0x590 <SHT11ConnectionReset+0x10>
		SHT11Delay  
		SHT11_PORT &= ~SHT11_SCK;          //SCK=0
 594:	90 98       	cbi	0x12, 0	; 18
 596:	9a e0       	ldi	r25, 0x0A	; 10
 598:	9a 95       	dec	r25
 59a:	f1 f7       	brne	.-4      	; 0x598 <SHT11ConnectionReset+0x18>
 59c:	81 50       	subi	r24, 0x01	; 1
    unsigned char i;
	
	SHT11_PORT |= SHT11_DATA;       //DATA=1
	SHT11_PORT &= ~SHT11_SCK;       //SCK=0
	SHT11Delay
    for(i=0;i<9;i++)
 59e:	b1 f7       	brne	.-20     	; 0x58c <SHT11ConnectionReset+0xc>
		SHT11_PORT |= SHT11_SCK;           //SCK=1
		SHT11Delay  
		SHT11_PORT &= ~SHT11_SCK;          //SCK=0
		SHT11Delay              
    }        
    SHT11TransStart();
 5a0:	d0 cf       	rjmp	.-96     	; 0x542 <SHT11TransStart>
 5a2:	08 95       	ret

000005a4 <SHT11WriteByte>:

void SHT11WriteByte(unsigned short value)
{
  unsigned short i;

  SHT11_DDR  |= SHT11_DATA;       //DATA-line in output
 5a4:	89 9a       	sbi	0x11, 1	; 17
 5a6:	48 e0       	ldi	r20, 0x08	; 8
 5a8:	50 e0       	ldi	r21, 0x00	; 0

  for (i=0x80;i>0;i/=2)                 //shift bit for masking
 5aa:	20 e8       	ldi	r18, 0x80	; 128
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	6a e0       	ldi	r22, 0x0A	; 10
 5b0:	6a 95       	dec	r22
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <SHT11WriteByte+0xc>
  {
    SHT11Delay
    if (i & value) SHT11_PORT |= SHT11_DATA;
 5b4:	b9 01       	movw	r22, r18
 5b6:	68 23       	and	r22, r24
 5b8:	79 23       	and	r23, r25
 5ba:	67 2b       	or	r22, r23
 5bc:	11 f0       	breq	.+4      	; 0x5c2 <SHT11WriteByte+0x1e>
 5be:	91 9a       	sbi	0x12, 1	; 18
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <SHT11WriteByte+0x20>
    else SHT11_PORT &= ~SHT11_DATA;
 5c2:	91 98       	cbi	0x12, 1	; 18
 5c4:	6a e0       	ldi	r22, 0x0A	; 10
 5c6:	6a 95       	dec	r22
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <SHT11WriteByte+0x22>
    SHT11Delay
    SHT11_PORT |= SHT11_SCK;
 5ca:	90 9a       	sbi	0x12, 0	; 18
 5cc:	6a e0       	ldi	r22, 0x0A	; 10
 5ce:	6a 95       	dec	r22
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <SHT11WriteByte+0x2a>
    SHT11Delay
    SHT11_PORT &= ~SHT11_SCK;
 5d2:	90 98       	cbi	0x12, 0	; 18
{
  unsigned short i;

  SHT11_DDR  |= SHT11_DATA;       //DATA-line in output

  for (i=0x80;i>0;i/=2)                 //shift bit for masking
 5d4:	36 95       	lsr	r19
 5d6:	27 95       	ror	r18
 5d8:	41 50       	subi	r20, 0x01	; 1
 5da:	51 09       	sbc	r21, r1
 5dc:	41 15       	cp	r20, r1
 5de:	51 05       	cpc	r21, r1
 5e0:	31 f7       	brne	.-52     	; 0x5ae <SHT11WriteByte+0xa>
    SHT11_PORT |= SHT11_SCK;
    SHT11Delay
    SHT11_PORT &= ~SHT11_SCK;
  }

  SHT11_PORT |= SHT11_DATA;       //release DATA-line
 5e2:	91 9a       	sbi	0x12, 1	; 18
  SHT11_DDR  &= ~SHT11_DATA;      //DATA-line in input
 5e4:	89 98       	cbi	0x11, 1	; 17
 5e6:	8a e0       	ldi	r24, 0x0A	; 10
 5e8:	8a 95       	dec	r24
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <SHT11WriteByte+0x44>
  SHT11Delay
  SHT11_PORT |= SHT11_SCK;       //clk #9 for ack
 5ec:	90 9a       	sbi	0x12, 0	; 18
 5ee:	6a e0       	ldi	r22, 0x0A	; 10
 5f0:	6a 95       	dec	r22
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <SHT11WriteByte+0x4c>
  SHT11Delay
  //if (SHT11_PIN & SHT11_DATA) HumiError = TRUE;
  SHT11_PORT &= ~SHT11_SCK;
 5f4:	90 98       	cbi	0x12, 0	; 18
 5f6:	8a e0       	ldi	r24, 0x0A	; 10
 5f8:	8a 95       	dec	r24
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <SHT11WriteByte+0x54>
 5fc:	08 95       	ret

000005fe <SHT11ReadByte>:
  SHT11Delay
}
unsigned short SHT11ReadByte(unsigned short ack)
{
 5fe:	bc 01       	movw	r22, r24
  unsigned short i,val=0;

  SHT11_PORT |= SHT11_DATA;       //release DATA-line
 600:	91 9a       	sbi	0x12, 1	; 18
  SHT11_DDR  &= ~SHT11_DATA;      //DATA-line in input
 602:	89 98       	cbi	0x11, 1	; 17
 604:	28 e0       	ldi	r18, 0x08	; 8
 606:	30 e0       	ldi	r19, 0x00	; 0
  SHT11_PORT &= ~SHT11_SCK;
  SHT11Delay
}
unsigned short SHT11ReadByte(unsigned short ack)
{
  unsigned short i,val=0;
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	90 e0       	ldi	r25, 0x00	; 0

  SHT11_PORT |= SHT11_DATA;       //release DATA-line
  SHT11_DDR  &= ~SHT11_DATA;      //DATA-line in input

  for (i = 0x80; i > 0; i /= 2)         //shift bit for masking
 60c:	40 e8       	ldi	r20, 0x80	; 128
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	ea e0       	ldi	r30, 0x0A	; 10
 612:	ea 95       	dec	r30
 614:	f1 f7       	brne	.-4      	; 0x612 <SHT11ReadByte+0x14>
  {
    SHT11Delay
    SHT11_PORT |= SHT11_SCK;      //clk for SENSI-BUS
 616:	90 9a       	sbi	0x12, 0	; 18
 618:	ea e0       	ldi	r30, 0x0A	; 10
 61a:	ea 95       	dec	r30
 61c:	f1 f7       	brne	.-4      	; 0x61a <SHT11ReadByte+0x1c>
    SHT11Delay
    if (SHT11_PIN & SHT11_DATA) val = (val | i);  //read bit
 61e:	81 9b       	sbis	0x10, 1	; 16
 620:	02 c0       	rjmp	.+4      	; 0x626 <SHT11ReadByte+0x28>
 622:	84 2b       	or	r24, r20
 624:	95 2b       	or	r25, r21
    SHT11_PORT &= ~SHT11_SCK;
 626:	90 98       	cbi	0x12, 0	; 18
  unsigned short i,val=0;

  SHT11_PORT |= SHT11_DATA;       //release DATA-line
  SHT11_DDR  &= ~SHT11_DATA;      //DATA-line in input

  for (i = 0x80; i > 0; i /= 2)         //shift bit for masking
 628:	56 95       	lsr	r21
 62a:	47 95       	ror	r20
 62c:	21 50       	subi	r18, 0x01	; 1
 62e:	31 09       	sbc	r19, r1
 630:	21 15       	cp	r18, r1
 632:	31 05       	cpc	r19, r1
 634:	69 f7       	brne	.-38     	; 0x610 <SHT11ReadByte+0x12>
    SHT11Delay
    if (SHT11_PIN & SHT11_DATA) val = (val | i);  //read bit
    SHT11_PORT &= ~SHT11_SCK;
  }

  if (ack == 1) {
 636:	61 30       	cpi	r22, 0x01	; 1
 638:	71 05       	cpc	r23, r1
 63a:	59 f4       	brne	.+22     	; 0x652 <SHT11ReadByte+0x54>
    SHT11_DDR  |= SHT11_DATA;     //DATA-line in output
 63c:	89 9a       	sbi	0x11, 1	; 17
    SHT11_PORT &= ~SHT11_DATA;    //"ack==1" pull down DATA-Line
 63e:	91 98       	cbi	0x12, 1	; 18
 640:	2a e0       	ldi	r18, 0x0A	; 10
 642:	2a 95       	dec	r18
 644:	f1 f7       	brne	.-4      	; 0x642 <SHT11ReadByte+0x44>
    SHT11Delay
    SHT11_PORT |= SHT11_SCK;
 646:	90 9a       	sbi	0x12, 0	; 18
 648:	ea e0       	ldi	r30, 0x0A	; 10
 64a:	ea 95       	dec	r30
 64c:	f1 f7       	brne	.-4      	; 0x64a <SHT11ReadByte+0x4c>
    SHT11Delay
    SHT11_PORT &= ~SHT11_SCK;
 64e:	90 98       	cbi	0x12, 0	; 18
 650:	08 95       	ret
 652:	2a e0       	ldi	r18, 0x0A	; 10
 654:	2a 95       	dec	r18
 656:	f1 f7       	brne	.-4      	; 0x654 <SHT11ReadByte+0x56>
  }
  else {
    SHT11Delay
    SHT11_PORT |= SHT11_SCK;
 658:	90 9a       	sbi	0x12, 0	; 18
 65a:	ea e0       	ldi	r30, 0x0A	; 10
 65c:	ea 95       	dec	r30
 65e:	f1 f7       	brne	.-4      	; 0x65c <SHT11ReadByte+0x5e>
    SHT11Delay
    SHT11_PORT &= ~SHT11_SCK;
 660:	90 98       	cbi	0x12, 0	; 18
  }
  return val;
}
 662:	08 95       	ret

00000664 <SHT11SoftReset>:
void SHT11SoftReset(void)
{
  int i;
  SHT11ConnectionReset();           //Reset communication
 664:	8d df       	rcall	.-230    	; 0x580 <SHT11ConnectionReset>
  SHT11WriteByte(SHT11_RESET);   //send Reset-command to sensor
 666:	8e e1       	ldi	r24, 0x1E	; 30
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	9c df       	rcall	.-200    	; 0x5a4 <SHT11WriteByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 66c:	22 e3       	ldi	r18, 0x32	; 50
 66e:	83 e7       	ldi	r24, 0x73	; 115
 670:	99 e0       	ldi	r25, 0x09	; 9
 672:	21 50       	subi	r18, 0x01	; 1
 674:	80 40       	sbci	r24, 0x00	; 0
 676:	90 40       	sbci	r25, 0x00	; 0
 678:	e1 f7       	brne	.-8      	; 0x672 <SHT11SoftReset+0xe>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <SHT11SoftReset+0x18>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <SHT11SoftReset+0x1a>
 67e:	84 e6       	ldi	r24, 0x64	; 100
 680:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 682:	2a e0       	ldi	r18, 0x0A	; 10
 684:	2a 95       	dec	r18
 686:	f1 f7       	brne	.-4      	; 0x684 <SHT11SoftReset+0x20>
 688:	01 97       	sbiw	r24, 0x01	; 1
  _delay_ms(210);
  for (i=0;i<100;i++) SHT11Delay // 11ms delay
 68a:	00 97       	sbiw	r24, 0x00	; 0
 68c:	d1 f7       	brne	.-12     	; 0x682 <SHT11SoftReset+0x1e>
}
 68e:	08 95       	ret

00000690 <SHT11Init>:

void SHT11Init(void)
{
  SHT11_DDR |= SHT11_DATA + SHT11_SCK;
 690:	81 b3       	in	r24, 0x11	; 17
 692:	83 60       	ori	r24, 0x03	; 3
 694:	81 bb       	out	0x11, r24	; 17
  SHT11_PORT |= SHT11_DATA + SHT11_SCK;
 696:	82 b3       	in	r24, 0x12	; 18
 698:	83 60       	ori	r24, 0x03	; 3
 69a:	82 bb       	out	0x12, r24	; 18
  SHT11SoftReset();
 69c:	e3 cf       	rjmp	.-58     	; 0x664 <SHT11SoftReset>
 69e:	08 95       	ret

000006a0 <Get_Temp>:
}
signed int Get_Temp(void){
 6a0:	1f 93       	push	r17
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29

	unsigned short msb=0, lsb=0;
	float temp=0.0;

	SHT11TransStart();
 6a6:	4d df       	rcall	.-358    	; 0x542 <SHT11TransStart>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6a8:	8c ec       	ldi	r24, 0xCC	; 204
 6aa:	9c e1       	ldi	r25, 0x1C	; 28
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <Get_Temp+0xc>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <Get_Temp+0x12>
 6b2:	00 00       	nop
	_delay_ms(2);	
	SHT11WriteByte(TEMP);
 6b4:	83 e0       	ldi	r24, 0x03	; 3
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	75 df       	rcall	.-278    	; 0x5a4 <SHT11WriteByte>
	SHT11_PORT |= SHT11_DATA;           //release DATA-line
 6ba:	91 9a       	sbi	0x12, 1	; 18
	SHT11_DDR  &= ~SHT11_DATA;          //DATA-line in input
 6bc:	89 98       	cbi	0x11, 1	; 17
	while((SHT11_PIN & SHT11_DATA) != 0);     //wait until sensor has finished the measure
 6be:	81 99       	sbic	0x10, 1	; 16
 6c0:	fe cf       	rjmp	.-4      	; 0x6be <Get_Temp+0x1e>
	msb = SHT11ReadByte(ACK);              //read the first byte (MSB)
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	9b df       	rcall	.-202    	; 0x5fe <SHT11ReadByte>
 6c8:	18 2f       	mov	r17, r24
	lsb = SHT11ReadByte(ACK);              //read the second byte (LSB)
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	97 df       	rcall	.-210    	; 0x5fe <SHT11ReadByte>
 6d0:	ec 01       	movw	r28, r24
	SHT11ReadByte(noACK);             //dummy read checksum
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	93 df       	rcall	.-218    	; 0x5fe <SHT11ReadByte>
	temp = (msb << 8) + lsb;
 6d8:	60 e0       	ldi	r22, 0x00	; 0
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	71 2f       	mov	r23, r17
 6de:	6c 0f       	add	r22, r28
 6e0:	7d 1f       	adc	r23, r29
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	c9 d1       	rcall	.+914    	; 0xa7a <__floatunsisf>
	temp = d1+d2*temp;
 6e8:	2a e0       	ldi	r18, 0x0A	; 10
 6ea:	37 ed       	ldi	r19, 0xD7	; 215
 6ec:	43 e2       	ldi	r20, 0x23	; 35
 6ee:	5c e3       	ldi	r21, 0x3C	; 60
 6f0:	52 d2       	rcall	.+1188   	; 0xb96 <__mulsf3>
 6f2:	27 ed       	ldi	r18, 0xD7	; 215
 6f4:	33 ea       	ldi	r19, 0xA3	; 163
 6f6:	4e e1       	ldi	r20, 0x1E	; 30
 6f8:	52 e4       	ldi	r21, 0x42	; 66
 6fa:	29 d1       	rcall	.+594    	; 0x94e <__subsf3>
	return temp;
 6fc:	8d d1       	rcall	.+794    	; 0xa18 <__fixsfsi>
}
 6fe:	cb 01       	movw	r24, r22
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	1f 91       	pop	r17
 706:	08 95       	ret

00000708 <Get_Humi>:
int Get_Humi(void){
 708:	8f 92       	push	r8
 70a:	9f 92       	push	r9
 70c:	af 92       	push	r10
 70e:	bf 92       	push	r11
 710:	cf 92       	push	r12
 712:	df 92       	push	r13
 714:	ef 92       	push	r14
 716:	ff 92       	push	r15

	unsigned short msb=0, lsb=0;
	unsigned temp=0;

	SHT11TransStart();
 718:	14 df       	rcall	.-472    	; 0x542 <SHT11TransStart>
 71a:	8c ec       	ldi	r24, 0xCC	; 204
 71c:	9c e1       	ldi	r25, 0x1C	; 28
 71e:	01 97       	sbiw	r24, 0x01	; 1
 720:	f1 f7       	brne	.-4      	; 0x71e <Get_Humi+0x16>
 722:	00 c0       	rjmp	.+0      	; 0x724 <Get_Humi+0x1c>
 724:	00 00       	nop
	_delay_ms(2);	
	SHT11WriteByte(HUMI);
 726:	85 e0       	ldi	r24, 0x05	; 5
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	3c df       	rcall	.-392    	; 0x5a4 <SHT11WriteByte>
	SHT11_PORT |= SHT11_DATA;           //release DATA-line
 72c:	91 9a       	sbi	0x12, 1	; 18
	SHT11_DDR  &= ~SHT11_DATA;          //DATA-line in input
 72e:	89 98       	cbi	0x11, 1	; 17
	while((SHT11_PIN & SHT11_DATA) != 0);     //wait until sensor has finished the measure
 730:	81 99       	sbic	0x10, 1	; 16
 732:	fe cf       	rjmp	.-4      	; 0x730 <Get_Humi+0x28>
	msb = SHT11ReadByte(ACK);              //read the first byte (MSB)
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	62 df       	rcall	.-316    	; 0x5fe <SHT11ReadByte>
 73a:	d8 2e       	mov	r13, r24
	lsb = SHT11ReadByte(ACK);              //read the second byte (LSB)
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	5e df       	rcall	.-324    	; 0x5fe <SHT11ReadByte>
 742:	7c 01       	movw	r14, r24
	SHT11ReadByte(noACK);             //dummy read checksum
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	5a df       	rcall	.-332    	; 0x5fe <SHT11ReadByte>
	temp = (msb << 8) + lsb;
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	7d 2d       	mov	r23, r13
 750:	6e 0d       	add	r22, r14
 752:	7f 1d       	adc	r23, r15
	temp = c1+c2*temp+c3*temp*temp;
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	90 d1       	rcall	.+800    	; 0xa7a <__floatunsisf>
 75a:	6b 01       	movw	r12, r22
 75c:	7c 01       	movw	r14, r24
 75e:	24 e5       	ldi	r18, 0x54	; 84
 760:	33 ee       	ldi	r19, 0xE3	; 227
 762:	45 e2       	ldi	r20, 0x25	; 37
 764:	5d e3       	ldi	r21, 0x3D	; 61
 766:	17 d2       	rcall	.+1070   	; 0xb96 <__mulsf3>
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	40 e8       	ldi	r20, 0x80	; 128
 76e:	50 e4       	ldi	r21, 0x40	; 64
 770:	ee d0       	rcall	.+476    	; 0x94e <__subsf3>
 772:	4b 01       	movw	r8, r22
 774:	5c 01       	movw	r10, r24
 776:	22 ea       	ldi	r18, 0xA2	; 162
 778:	37 ee       	ldi	r19, 0xE7	; 231
 77a:	4b e3       	ldi	r20, 0x3B	; 59
 77c:	56 eb       	ldi	r21, 0xB6	; 182
 77e:	c7 01       	movw	r24, r14
 780:	b6 01       	movw	r22, r12
 782:	09 d2       	rcall	.+1042   	; 0xb96 <__mulsf3>
 784:	9b 01       	movw	r18, r22
 786:	ac 01       	movw	r20, r24
 788:	c7 01       	movw	r24, r14
 78a:	b6 01       	movw	r22, r12
 78c:	04 d2       	rcall	.+1032   	; 0xb96 <__mulsf3>
 78e:	9b 01       	movw	r18, r22
 790:	ac 01       	movw	r20, r24
 792:	c5 01       	movw	r24, r10
 794:	b4 01       	movw	r22, r8
 796:	dc d0       	rcall	.+440    	; 0x950 <__addsf3>
 798:	44 d1       	rcall	.+648    	; 0xa22 <__fixunssfsi>
	return temp;
}
 79a:	cb 01       	movw	r24, r22
 79c:	ff 90       	pop	r15
 79e:	ef 90       	pop	r14
 7a0:	df 90       	pop	r13
 7a2:	cf 90       	pop	r12
 7a4:	bf 90       	pop	r11
 7a6:	af 90       	pop	r10
 7a8:	9f 90       	pop	r9
 7aa:	8f 90       	pop	r8
 7ac:	08 95       	ret

000007ae <__vector_12>:
#include <avr/io.h>
#define F_CPU 14745600UL
#include <avr/interrupt.h>

SIGNAL(TIMER1_COMPA_vect)   //인터럽트 서비스 루틴
{
 7ae:	1f 92       	push	r1
 7b0:	0f 92       	push	r0
 7b2:	0f b6       	in	r0, 0x3f	; 63
 7b4:	0f 92       	push	r0
 7b6:	11 24       	eor	r1, r1

}
 7b8:	0f 90       	pop	r0
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	0f 90       	pop	r0
 7be:	1f 90       	pop	r1
 7c0:	18 95       	reti

000007c2 <Timer1A_Init>:
/*SIGNAL(TIMER1_COMPC_vect)	//인터럽트 서비스 루틴
{
	
}*/

void Timer1A_Init(int ms){	//매개변수로 넘겨받는 시간 주기로 인터럽트 발생(단위 ms)
 7c2:	cf 92       	push	r12
 7c4:	df 92       	push	r13
 7c6:	ef 92       	push	r14
 7c8:	ff 92       	push	r15
 7ca:	6c 01       	movw	r12, r24
	int divider;

	TCCR1A |= 0b10101010;              //don't output OC1A
 7cc:	8f b5       	in	r24, 0x2f	; 47
 7ce:	8a 6a       	ori	r24, 0xAA	; 170
 7d0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11) ;  //Fast PWM_mod, divide 8 
 7d2:	8e b5       	in	r24, 0x2e	; 46
 7d4:	8a 61       	ori	r24, 0x1A	; 26
 7d6:	8e bd       	out	0x2e, r24	; 46
	TCCR1C |= 0;       
 7d8:	ea e7       	ldi	r30, 0x7A	; 122
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	80 83       	st	Z, r24

	switch(TCCR1B & 0b00000111){
 7e0:	8e b5       	in	r24, 0x2e	; 46
 7e2:	87 70       	andi	r24, 0x07	; 7
 7e4:	83 30       	cpi	r24, 0x03	; 3
 7e6:	59 f0       	breq	.+22     	; 0x7fe <Timer1A_Init+0x3c>
 7e8:	18 f4       	brcc	.+6      	; 0x7f0 <Timer1A_Init+0x2e>
 7ea:	82 30       	cpi	r24, 0x02	; 2
 7ec:	89 f0       	breq	.+34     	; 0x810 <Timer1A_Init+0x4e>
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <Timer1A_Init+0x36>
 7f0:	84 30       	cpi	r24, 0x04	; 4
 7f2:	41 f0       	breq	.+16     	; 0x804 <Timer1A_Init+0x42>
 7f4:	85 30       	cpi	r24, 0x05	; 5
 7f6:	49 f0       	breq	.+18     	; 0x80a <Timer1A_Init+0x48>
		case 0b001 : divider = 1;	    break;
 7f8:	21 e0       	ldi	r18, 0x01	; 1
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	0b c0       	rjmp	.+22     	; 0x814 <Timer1A_Init+0x52>
		case 0b010 : divider = 8;		break;
		case 0b011 : divider = 64;		break;
 7fe:	20 e4       	ldi	r18, 0x40	; 64
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	08 c0       	rjmp	.+16     	; 0x814 <Timer1A_Init+0x52>
		case 0b100 : divider = 256;		break;
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	31 e0       	ldi	r19, 0x01	; 1
 808:	05 c0       	rjmp	.+10     	; 0x814 <Timer1A_Init+0x52>
		case 0b101 : divider = 1024;	break;
 80a:	20 e0       	ldi	r18, 0x00	; 0
 80c:	34 e0       	ldi	r19, 0x04	; 4
 80e:	02 c0       	rjmp	.+4      	; 0x814 <Timer1A_Init+0x52>
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11) ;  //Fast PWM_mod, divide 8 
	TCCR1C |= 0;       

	switch(TCCR1B & 0b00000111){
		case 0b001 : divider = 1;	    break;
		case 0b010 : divider = 8;		break;
 810:	28 e0       	ldi	r18, 0x08	; 8
 812:	30 e0       	ldi	r19, 0x00	; 0
		case 0b100 : divider = 256;		break;
		case 0b101 : divider = 1024;	break;
		default :    divider = 1;       break;
	}

 	OCR1AH = ((F_CPU/divider/1000*ms-1) >> 8);  
 814:	44 27       	eor	r20, r20
 816:	37 fd       	sbrc	r19, 7
 818:	40 95       	com	r20
 81a:	54 2f       	mov	r21, r20
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	81 ee       	ldi	r24, 0xE1	; 225
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	3d d2       	rcall	.+1146   	; 0xca0 <__udivmodsi4>
 826:	ca 01       	movw	r24, r20
 828:	b9 01       	movw	r22, r18
 82a:	28 ee       	ldi	r18, 0xE8	; 232
 82c:	33 e0       	ldi	r19, 0x03	; 3
 82e:	40 e0       	ldi	r20, 0x00	; 0
 830:	50 e0       	ldi	r21, 0x00	; 0
 832:	36 d2       	rcall	.+1132   	; 0xca0 <__udivmodsi4>
 834:	e2 2f       	mov	r30, r18
 836:	ee 24       	eor	r14, r14
 838:	d7 fc       	sbrc	r13, 7
 83a:	e0 94       	com	r14
 83c:	fe 2c       	mov	r15, r14
 83e:	c7 01       	movw	r24, r14
 840:	b6 01       	movw	r22, r12
 842:	0c d2       	rcall	.+1048   	; 0xc5c <__mulsi3>
 844:	dc 01       	movw	r26, r24
 846:	cb 01       	movw	r24, r22
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	a1 09       	sbc	r26, r1
 84c:	b1 09       	sbc	r27, r1
 84e:	89 2f       	mov	r24, r25
 850:	9a 2f       	mov	r25, r26
 852:	ab 2f       	mov	r26, r27
 854:	bb 27       	eor	r27, r27
 856:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = (F_CPU/divider/1000*ms-1) & 0XFF;
 858:	ec 9d       	mul	r30, r12
 85a:	c0 2c       	mov	r12, r0
 85c:	11 24       	eor	r1, r1
 85e:	ef ef       	ldi	r30, 0xFF	; 255
 860:	ec 0d       	add	r30, r12
 862:	ea bd       	out	0x2a, r30	; 42
	 
	ICR1 = 19999;									//0.5usec*20000=100Hz
 864:	8f e1       	ldi	r24, 0x1F	; 31
 866:	9e e4       	ldi	r25, 0x4E	; 78
 868:	97 bd       	out	0x27, r25	; 39
 86a:	86 bd       	out	0x26, r24	; 38
	
	//OCR1B = 0x1A00;
	
	
	TCNT1H = 0x00;                               // clear Timer/Counter1
 86c:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0x00;
 86e:	1c bc       	out	0x2c, r1	; 44

	//TIMSK |= 1<<OCIE1A;                          // enable OC1A interrupt

	TIFR = 0X00;                                 // clear all interrupt flags
 870:	16 be       	out	0x36, r1	; 54
	ETIFR = 0X00;
 872:	10 92 7c 00 	sts	0x007C, r1
}	
 876:	ff 90       	pop	r15
 878:	ef 90       	pop	r14
 87a:	df 90       	pop	r13
 87c:	cf 90       	pop	r12
 87e:	08 95       	ret

00000880 <Timer3A_Init>:
void Timer3A_Init(int ms){	
 880:	cf 92       	push	r12
 882:	df 92       	push	r13
 884:	ef 92       	push	r14
 886:	ff 92       	push	r15
 888:	6c 01       	movw	r12, r24
	int divider;
	
	TCCR3A |= 0;								//don't output OC1A
 88a:	eb e8       	ldi	r30, 0x8B	; 139
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	80 81       	ld	r24, Z
 890:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32) | (1<<CS12);			//Timer1A CTC_mod
 892:	ea e8       	ldi	r30, 0x8A	; 138
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	8c 60       	ori	r24, 0x0C	; 12
 89a:	80 83       	st	Z, r24
 	TCCR3C |= 0;       
 89c:	ac e8       	ldi	r26, 0x8C	; 140
 89e:	b0 e0       	ldi	r27, 0x00	; 0
 8a0:	8c 91       	ld	r24, X
 8a2:	8c 93       	st	X, r24
	switch(TCCR3B & 0b00000111){
 8a4:	80 81       	ld	r24, Z
 8a6:	87 70       	andi	r24, 0x07	; 7
 8a8:	83 30       	cpi	r24, 0x03	; 3
 8aa:	59 f0       	breq	.+22     	; 0x8c2 <Timer3A_Init+0x42>
 8ac:	18 f4       	brcc	.+6      	; 0x8b4 <Timer3A_Init+0x34>
 8ae:	82 30       	cpi	r24, 0x02	; 2
 8b0:	89 f0       	breq	.+34     	; 0x8d4 <Timer3A_Init+0x54>
 8b2:	04 c0       	rjmp	.+8      	; 0x8bc <Timer3A_Init+0x3c>
 8b4:	84 30       	cpi	r24, 0x04	; 4
 8b6:	41 f0       	breq	.+16     	; 0x8c8 <Timer3A_Init+0x48>
 8b8:	85 30       	cpi	r24, 0x05	; 5
 8ba:	49 f0       	breq	.+18     	; 0x8ce <Timer3A_Init+0x4e>
		case 0b001 : divider = 1;	    break;
 8bc:	21 e0       	ldi	r18, 0x01	; 1
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	0b c0       	rjmp	.+22     	; 0x8d8 <Timer3A_Init+0x58>
		case 0b010 : divider = 8;		break;
		case 0b011 : divider = 64;		break;
 8c2:	20 e4       	ldi	r18, 0x40	; 64
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <Timer3A_Init+0x58>
		case 0b100 : divider = 256;		break;
 8c8:	20 e0       	ldi	r18, 0x00	; 0
 8ca:	31 e0       	ldi	r19, 0x01	; 1
 8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <Timer3A_Init+0x58>
		case 0b101 : divider = 1024;	break;
 8ce:	20 e0       	ldi	r18, 0x00	; 0
 8d0:	34 e0       	ldi	r19, 0x04	; 4
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <Timer3A_Init+0x58>
	TCCR3A |= 0;								//don't output OC1A
	TCCR3B |= (1<<WGM32) | (1<<CS12);			//Timer1A CTC_mod
 	TCCR3C |= 0;       
	switch(TCCR3B & 0b00000111){
		case 0b001 : divider = 1;	    break;
		case 0b010 : divider = 8;		break;
 8d4:	28 e0       	ldi	r18, 0x08	; 8
 8d6:	30 e0       	ldi	r19, 0x00	; 0
		case 0b100 : divider = 256;		break;
		case 0b101 : divider = 1024;	break;
		default :    divider = 1;	    break;
	}

 	OCR3AH = ((F_CPU/divider/1000*ms-1) >> 8);  
 8d8:	44 27       	eor	r20, r20
 8da:	37 fd       	sbrc	r19, 7
 8dc:	40 95       	com	r20
 8de:	54 2f       	mov	r21, r20
 8e0:	60 e0       	ldi	r22, 0x00	; 0
 8e2:	70 e0       	ldi	r23, 0x00	; 0
 8e4:	81 ee       	ldi	r24, 0xE1	; 225
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	db d1       	rcall	.+950    	; 0xca0 <__udivmodsi4>
 8ea:	ca 01       	movw	r24, r20
 8ec:	b9 01       	movw	r22, r18
 8ee:	28 ee       	ldi	r18, 0xE8	; 232
 8f0:	33 e0       	ldi	r19, 0x03	; 3
 8f2:	40 e0       	ldi	r20, 0x00	; 0
 8f4:	50 e0       	ldi	r21, 0x00	; 0
 8f6:	d4 d1       	rcall	.+936    	; 0xca0 <__udivmodsi4>
 8f8:	e2 2f       	mov	r30, r18
 8fa:	ee 24       	eor	r14, r14
 8fc:	d7 fc       	sbrc	r13, 7
 8fe:	e0 94       	com	r14
 900:	fe 2c       	mov	r15, r14
 902:	c7 01       	movw	r24, r14
 904:	b6 01       	movw	r22, r12
 906:	aa d1       	rcall	.+852    	; 0xc5c <__mulsi3>
 908:	dc 01       	movw	r26, r24
 90a:	cb 01       	movw	r24, r22
 90c:	01 97       	sbiw	r24, 0x01	; 1
 90e:	a1 09       	sbc	r26, r1
 910:	b1 09       	sbc	r27, r1
 912:	89 2f       	mov	r24, r25
 914:	9a 2f       	mov	r25, r26
 916:	ab 2f       	mov	r26, r27
 918:	bb 27       	eor	r27, r27
 91a:	80 93 87 00 	sts	0x0087, r24
	OCR3AL = (F_CPU/divider/1000*ms-1) & 0XFF; 
 91e:	ec 9d       	mul	r30, r12
 920:	c0 2c       	mov	r12, r0
 922:	11 24       	eor	r1, r1
 924:	ef ef       	ldi	r30, 0xFF	; 255
 926:	ec 0d       	add	r30, r12
 928:	e0 93 86 00 	sts	0x0086, r30
   
 	TCNT3H = 0X00;
 92c:	10 92 89 00 	sts	0x0089, r1
 	TCNT3L = 0X00;
 930:	10 92 88 00 	sts	0x0088, r1
  
	ETIMSK |= 1<<OCIE3A;
 934:	ed e7       	ldi	r30, 0x7D	; 125
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	80 61       	ori	r24, 0x10	; 16
 93c:	80 83       	st	Z, r24
	TIFR = 0X00;
 93e:	16 be       	out	0x36, r1	; 54
	ETIFR = 0X00;
 940:	10 92 7c 00 	sts	0x007C, r1
}
 944:	ff 90       	pop	r15
 946:	ef 90       	pop	r14
 948:	df 90       	pop	r13
 94a:	cf 90       	pop	r12
 94c:	08 95       	ret

0000094e <__subsf3>:
 94e:	50 58       	subi	r21, 0x80	; 128

00000950 <__addsf3>:
 950:	bb 27       	eor	r27, r27
 952:	aa 27       	eor	r26, r26
 954:	0e d0       	rcall	.+28     	; 0x972 <__addsf3x>
 956:	e5 c0       	rjmp	.+458    	; 0xb22 <__fp_round>
 958:	d6 d0       	rcall	.+428    	; 0xb06 <__fp_pscA>
 95a:	30 f0       	brcs	.+12     	; 0x968 <__addsf3+0x18>
 95c:	db d0       	rcall	.+438    	; 0xb14 <__fp_pscB>
 95e:	20 f0       	brcs	.+8      	; 0x968 <__addsf3+0x18>
 960:	31 f4       	brne	.+12     	; 0x96e <__addsf3+0x1e>
 962:	9f 3f       	cpi	r25, 0xFF	; 255
 964:	11 f4       	brne	.+4      	; 0x96a <__addsf3+0x1a>
 966:	1e f4       	brtc	.+6      	; 0x96e <__addsf3+0x1e>
 968:	cb c0       	rjmp	.+406    	; 0xb00 <__fp_nan>
 96a:	0e f4       	brtc	.+2      	; 0x96e <__addsf3+0x1e>
 96c:	e0 95       	com	r30
 96e:	e7 fb       	bst	r30, 7
 970:	c1 c0       	rjmp	.+386    	; 0xaf4 <__fp_inf>

00000972 <__addsf3x>:
 972:	e9 2f       	mov	r30, r25
 974:	e7 d0       	rcall	.+462    	; 0xb44 <__fp_split3>
 976:	80 f3       	brcs	.-32     	; 0x958 <__addsf3+0x8>
 978:	ba 17       	cp	r27, r26
 97a:	62 07       	cpc	r22, r18
 97c:	73 07       	cpc	r23, r19
 97e:	84 07       	cpc	r24, r20
 980:	95 07       	cpc	r25, r21
 982:	18 f0       	brcs	.+6      	; 0x98a <__addsf3x+0x18>
 984:	71 f4       	brne	.+28     	; 0x9a2 <__addsf3x+0x30>
 986:	9e f5       	brtc	.+102    	; 0x9ee <__addsf3x+0x7c>
 988:	ff c0       	rjmp	.+510    	; 0xb88 <__fp_zero>
 98a:	0e f4       	brtc	.+2      	; 0x98e <__addsf3x+0x1c>
 98c:	e0 95       	com	r30
 98e:	0b 2e       	mov	r0, r27
 990:	ba 2f       	mov	r27, r26
 992:	a0 2d       	mov	r26, r0
 994:	0b 01       	movw	r0, r22
 996:	b9 01       	movw	r22, r18
 998:	90 01       	movw	r18, r0
 99a:	0c 01       	movw	r0, r24
 99c:	ca 01       	movw	r24, r20
 99e:	a0 01       	movw	r20, r0
 9a0:	11 24       	eor	r1, r1
 9a2:	ff 27       	eor	r31, r31
 9a4:	59 1b       	sub	r21, r25
 9a6:	99 f0       	breq	.+38     	; 0x9ce <__addsf3x+0x5c>
 9a8:	59 3f       	cpi	r21, 0xF9	; 249
 9aa:	50 f4       	brcc	.+20     	; 0x9c0 <__addsf3x+0x4e>
 9ac:	50 3e       	cpi	r21, 0xE0	; 224
 9ae:	68 f1       	brcs	.+90     	; 0xa0a <__addsf3x+0x98>
 9b0:	1a 16       	cp	r1, r26
 9b2:	f0 40       	sbci	r31, 0x00	; 0
 9b4:	a2 2f       	mov	r26, r18
 9b6:	23 2f       	mov	r18, r19
 9b8:	34 2f       	mov	r19, r20
 9ba:	44 27       	eor	r20, r20
 9bc:	58 5f       	subi	r21, 0xF8	; 248
 9be:	f3 cf       	rjmp	.-26     	; 0x9a6 <__addsf3x+0x34>
 9c0:	46 95       	lsr	r20
 9c2:	37 95       	ror	r19
 9c4:	27 95       	ror	r18
 9c6:	a7 95       	ror	r26
 9c8:	f0 40       	sbci	r31, 0x00	; 0
 9ca:	53 95       	inc	r21
 9cc:	c9 f7       	brne	.-14     	; 0x9c0 <__addsf3x+0x4e>
 9ce:	7e f4       	brtc	.+30     	; 0x9ee <__addsf3x+0x7c>
 9d0:	1f 16       	cp	r1, r31
 9d2:	ba 0b       	sbc	r27, r26
 9d4:	62 0b       	sbc	r22, r18
 9d6:	73 0b       	sbc	r23, r19
 9d8:	84 0b       	sbc	r24, r20
 9da:	ba f0       	brmi	.+46     	; 0xa0a <__addsf3x+0x98>
 9dc:	91 50       	subi	r25, 0x01	; 1
 9de:	a1 f0       	breq	.+40     	; 0xa08 <__addsf3x+0x96>
 9e0:	ff 0f       	add	r31, r31
 9e2:	bb 1f       	adc	r27, r27
 9e4:	66 1f       	adc	r22, r22
 9e6:	77 1f       	adc	r23, r23
 9e8:	88 1f       	adc	r24, r24
 9ea:	c2 f7       	brpl	.-16     	; 0x9dc <__addsf3x+0x6a>
 9ec:	0e c0       	rjmp	.+28     	; 0xa0a <__addsf3x+0x98>
 9ee:	ba 0f       	add	r27, r26
 9f0:	62 1f       	adc	r22, r18
 9f2:	73 1f       	adc	r23, r19
 9f4:	84 1f       	adc	r24, r20
 9f6:	48 f4       	brcc	.+18     	; 0xa0a <__addsf3x+0x98>
 9f8:	87 95       	ror	r24
 9fa:	77 95       	ror	r23
 9fc:	67 95       	ror	r22
 9fe:	b7 95       	ror	r27
 a00:	f7 95       	ror	r31
 a02:	9e 3f       	cpi	r25, 0xFE	; 254
 a04:	08 f0       	brcs	.+2      	; 0xa08 <__addsf3x+0x96>
 a06:	b3 cf       	rjmp	.-154    	; 0x96e <__addsf3+0x1e>
 a08:	93 95       	inc	r25
 a0a:	88 0f       	add	r24, r24
 a0c:	08 f0       	brcs	.+2      	; 0xa10 <__addsf3x+0x9e>
 a0e:	99 27       	eor	r25, r25
 a10:	ee 0f       	add	r30, r30
 a12:	97 95       	ror	r25
 a14:	87 95       	ror	r24
 a16:	08 95       	ret

00000a18 <__fixsfsi>:
 a18:	04 d0       	rcall	.+8      	; 0xa22 <__fixunssfsi>
 a1a:	68 94       	set
 a1c:	b1 11       	cpse	r27, r1
 a1e:	b5 c0       	rjmp	.+362    	; 0xb8a <__fp_szero>
 a20:	08 95       	ret

00000a22 <__fixunssfsi>:
 a22:	98 d0       	rcall	.+304    	; 0xb54 <__fp_splitA>
 a24:	88 f0       	brcs	.+34     	; 0xa48 <__fixunssfsi+0x26>
 a26:	9f 57       	subi	r25, 0x7F	; 127
 a28:	90 f0       	brcs	.+36     	; 0xa4e <__fixunssfsi+0x2c>
 a2a:	b9 2f       	mov	r27, r25
 a2c:	99 27       	eor	r25, r25
 a2e:	b7 51       	subi	r27, 0x17	; 23
 a30:	a0 f0       	brcs	.+40     	; 0xa5a <__fixunssfsi+0x38>
 a32:	d1 f0       	breq	.+52     	; 0xa68 <__fixunssfsi+0x46>
 a34:	66 0f       	add	r22, r22
 a36:	77 1f       	adc	r23, r23
 a38:	88 1f       	adc	r24, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	1a f0       	brmi	.+6      	; 0xa44 <__fixunssfsi+0x22>
 a3e:	ba 95       	dec	r27
 a40:	c9 f7       	brne	.-14     	; 0xa34 <__fixunssfsi+0x12>
 a42:	12 c0       	rjmp	.+36     	; 0xa68 <__fixunssfsi+0x46>
 a44:	b1 30       	cpi	r27, 0x01	; 1
 a46:	81 f0       	breq	.+32     	; 0xa68 <__fixunssfsi+0x46>
 a48:	9f d0       	rcall	.+318    	; 0xb88 <__fp_zero>
 a4a:	b1 e0       	ldi	r27, 0x01	; 1
 a4c:	08 95       	ret
 a4e:	9c c0       	rjmp	.+312    	; 0xb88 <__fp_zero>
 a50:	67 2f       	mov	r22, r23
 a52:	78 2f       	mov	r23, r24
 a54:	88 27       	eor	r24, r24
 a56:	b8 5f       	subi	r27, 0xF8	; 248
 a58:	39 f0       	breq	.+14     	; 0xa68 <__fixunssfsi+0x46>
 a5a:	b9 3f       	cpi	r27, 0xF9	; 249
 a5c:	cc f3       	brlt	.-14     	; 0xa50 <__fixunssfsi+0x2e>
 a5e:	86 95       	lsr	r24
 a60:	77 95       	ror	r23
 a62:	67 95       	ror	r22
 a64:	b3 95       	inc	r27
 a66:	d9 f7       	brne	.-10     	; 0xa5e <__fixunssfsi+0x3c>
 a68:	3e f4       	brtc	.+14     	; 0xa78 <__fixunssfsi+0x56>
 a6a:	90 95       	com	r25
 a6c:	80 95       	com	r24
 a6e:	70 95       	com	r23
 a70:	61 95       	neg	r22
 a72:	7f 4f       	sbci	r23, 0xFF	; 255
 a74:	8f 4f       	sbci	r24, 0xFF	; 255
 a76:	9f 4f       	sbci	r25, 0xFF	; 255
 a78:	08 95       	ret

00000a7a <__floatunsisf>:
 a7a:	e8 94       	clt
 a7c:	09 c0       	rjmp	.+18     	; 0xa90 <__floatsisf+0x12>

00000a7e <__floatsisf>:
 a7e:	97 fb       	bst	r25, 7
 a80:	3e f4       	brtc	.+14     	; 0xa90 <__floatsisf+0x12>
 a82:	90 95       	com	r25
 a84:	80 95       	com	r24
 a86:	70 95       	com	r23
 a88:	61 95       	neg	r22
 a8a:	7f 4f       	sbci	r23, 0xFF	; 255
 a8c:	8f 4f       	sbci	r24, 0xFF	; 255
 a8e:	9f 4f       	sbci	r25, 0xFF	; 255
 a90:	99 23       	and	r25, r25
 a92:	a9 f0       	breq	.+42     	; 0xabe <__floatsisf+0x40>
 a94:	f9 2f       	mov	r31, r25
 a96:	96 e9       	ldi	r25, 0x96	; 150
 a98:	bb 27       	eor	r27, r27
 a9a:	93 95       	inc	r25
 a9c:	f6 95       	lsr	r31
 a9e:	87 95       	ror	r24
 aa0:	77 95       	ror	r23
 aa2:	67 95       	ror	r22
 aa4:	b7 95       	ror	r27
 aa6:	f1 11       	cpse	r31, r1
 aa8:	f8 cf       	rjmp	.-16     	; 0xa9a <__floatsisf+0x1c>
 aaa:	fa f4       	brpl	.+62     	; 0xaea <__floatsisf+0x6c>
 aac:	bb 0f       	add	r27, r27
 aae:	11 f4       	brne	.+4      	; 0xab4 <__floatsisf+0x36>
 ab0:	60 ff       	sbrs	r22, 0
 ab2:	1b c0       	rjmp	.+54     	; 0xaea <__floatsisf+0x6c>
 ab4:	6f 5f       	subi	r22, 0xFF	; 255
 ab6:	7f 4f       	sbci	r23, 0xFF	; 255
 ab8:	8f 4f       	sbci	r24, 0xFF	; 255
 aba:	9f 4f       	sbci	r25, 0xFF	; 255
 abc:	16 c0       	rjmp	.+44     	; 0xaea <__floatsisf+0x6c>
 abe:	88 23       	and	r24, r24
 ac0:	11 f0       	breq	.+4      	; 0xac6 <__floatsisf+0x48>
 ac2:	96 e9       	ldi	r25, 0x96	; 150
 ac4:	11 c0       	rjmp	.+34     	; 0xae8 <__floatsisf+0x6a>
 ac6:	77 23       	and	r23, r23
 ac8:	21 f0       	breq	.+8      	; 0xad2 <__floatsisf+0x54>
 aca:	9e e8       	ldi	r25, 0x8E	; 142
 acc:	87 2f       	mov	r24, r23
 ace:	76 2f       	mov	r23, r22
 ad0:	05 c0       	rjmp	.+10     	; 0xadc <__floatsisf+0x5e>
 ad2:	66 23       	and	r22, r22
 ad4:	71 f0       	breq	.+28     	; 0xaf2 <__floatsisf+0x74>
 ad6:	96 e8       	ldi	r25, 0x86	; 134
 ad8:	86 2f       	mov	r24, r22
 ada:	70 e0       	ldi	r23, 0x00	; 0
 adc:	60 e0       	ldi	r22, 0x00	; 0
 ade:	2a f0       	brmi	.+10     	; 0xaea <__floatsisf+0x6c>
 ae0:	9a 95       	dec	r25
 ae2:	66 0f       	add	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	da f7       	brpl	.-10     	; 0xae0 <__floatsisf+0x62>
 aea:	88 0f       	add	r24, r24
 aec:	96 95       	lsr	r25
 aee:	87 95       	ror	r24
 af0:	97 f9       	bld	r25, 7
 af2:	08 95       	ret

00000af4 <__fp_inf>:
 af4:	97 f9       	bld	r25, 7
 af6:	9f 67       	ori	r25, 0x7F	; 127
 af8:	80 e8       	ldi	r24, 0x80	; 128
 afa:	70 e0       	ldi	r23, 0x00	; 0
 afc:	60 e0       	ldi	r22, 0x00	; 0
 afe:	08 95       	ret

00000b00 <__fp_nan>:
 b00:	9f ef       	ldi	r25, 0xFF	; 255
 b02:	80 ec       	ldi	r24, 0xC0	; 192
 b04:	08 95       	ret

00000b06 <__fp_pscA>:
 b06:	00 24       	eor	r0, r0
 b08:	0a 94       	dec	r0
 b0a:	16 16       	cp	r1, r22
 b0c:	17 06       	cpc	r1, r23
 b0e:	18 06       	cpc	r1, r24
 b10:	09 06       	cpc	r0, r25
 b12:	08 95       	ret

00000b14 <__fp_pscB>:
 b14:	00 24       	eor	r0, r0
 b16:	0a 94       	dec	r0
 b18:	12 16       	cp	r1, r18
 b1a:	13 06       	cpc	r1, r19
 b1c:	14 06       	cpc	r1, r20
 b1e:	05 06       	cpc	r0, r21
 b20:	08 95       	ret

00000b22 <__fp_round>:
 b22:	09 2e       	mov	r0, r25
 b24:	03 94       	inc	r0
 b26:	00 0c       	add	r0, r0
 b28:	11 f4       	brne	.+4      	; 0xb2e <__fp_round+0xc>
 b2a:	88 23       	and	r24, r24
 b2c:	52 f0       	brmi	.+20     	; 0xb42 <__fp_round+0x20>
 b2e:	bb 0f       	add	r27, r27
 b30:	40 f4       	brcc	.+16     	; 0xb42 <__fp_round+0x20>
 b32:	bf 2b       	or	r27, r31
 b34:	11 f4       	brne	.+4      	; 0xb3a <__fp_round+0x18>
 b36:	60 ff       	sbrs	r22, 0
 b38:	04 c0       	rjmp	.+8      	; 0xb42 <__fp_round+0x20>
 b3a:	6f 5f       	subi	r22, 0xFF	; 255
 b3c:	7f 4f       	sbci	r23, 0xFF	; 255
 b3e:	8f 4f       	sbci	r24, 0xFF	; 255
 b40:	9f 4f       	sbci	r25, 0xFF	; 255
 b42:	08 95       	ret

00000b44 <__fp_split3>:
 b44:	57 fd       	sbrc	r21, 7
 b46:	90 58       	subi	r25, 0x80	; 128
 b48:	44 0f       	add	r20, r20
 b4a:	55 1f       	adc	r21, r21
 b4c:	59 f0       	breq	.+22     	; 0xb64 <__fp_splitA+0x10>
 b4e:	5f 3f       	cpi	r21, 0xFF	; 255
 b50:	71 f0       	breq	.+28     	; 0xb6e <__fp_splitA+0x1a>
 b52:	47 95       	ror	r20

00000b54 <__fp_splitA>:
 b54:	88 0f       	add	r24, r24
 b56:	97 fb       	bst	r25, 7
 b58:	99 1f       	adc	r25, r25
 b5a:	61 f0       	breq	.+24     	; 0xb74 <__fp_splitA+0x20>
 b5c:	9f 3f       	cpi	r25, 0xFF	; 255
 b5e:	79 f0       	breq	.+30     	; 0xb7e <__fp_splitA+0x2a>
 b60:	87 95       	ror	r24
 b62:	08 95       	ret
 b64:	12 16       	cp	r1, r18
 b66:	13 06       	cpc	r1, r19
 b68:	14 06       	cpc	r1, r20
 b6a:	55 1f       	adc	r21, r21
 b6c:	f2 cf       	rjmp	.-28     	; 0xb52 <__fp_split3+0xe>
 b6e:	46 95       	lsr	r20
 b70:	f1 df       	rcall	.-30     	; 0xb54 <__fp_splitA>
 b72:	08 c0       	rjmp	.+16     	; 0xb84 <__fp_splitA+0x30>
 b74:	16 16       	cp	r1, r22
 b76:	17 06       	cpc	r1, r23
 b78:	18 06       	cpc	r1, r24
 b7a:	99 1f       	adc	r25, r25
 b7c:	f1 cf       	rjmp	.-30     	; 0xb60 <__fp_splitA+0xc>
 b7e:	86 95       	lsr	r24
 b80:	71 05       	cpc	r23, r1
 b82:	61 05       	cpc	r22, r1
 b84:	08 94       	sec
 b86:	08 95       	ret

00000b88 <__fp_zero>:
 b88:	e8 94       	clt

00000b8a <__fp_szero>:
 b8a:	bb 27       	eor	r27, r27
 b8c:	66 27       	eor	r22, r22
 b8e:	77 27       	eor	r23, r23
 b90:	cb 01       	movw	r24, r22
 b92:	97 f9       	bld	r25, 7
 b94:	08 95       	ret

00000b96 <__mulsf3>:
 b96:	0b d0       	rcall	.+22     	; 0xbae <__mulsf3x>
 b98:	c4 cf       	rjmp	.-120    	; 0xb22 <__fp_round>
 b9a:	b5 df       	rcall	.-150    	; 0xb06 <__fp_pscA>
 b9c:	28 f0       	brcs	.+10     	; 0xba8 <__mulsf3+0x12>
 b9e:	ba df       	rcall	.-140    	; 0xb14 <__fp_pscB>
 ba0:	18 f0       	brcs	.+6      	; 0xba8 <__mulsf3+0x12>
 ba2:	95 23       	and	r25, r21
 ba4:	09 f0       	breq	.+2      	; 0xba8 <__mulsf3+0x12>
 ba6:	a6 cf       	rjmp	.-180    	; 0xaf4 <__fp_inf>
 ba8:	ab cf       	rjmp	.-170    	; 0xb00 <__fp_nan>
 baa:	11 24       	eor	r1, r1
 bac:	ee cf       	rjmp	.-36     	; 0xb8a <__fp_szero>

00000bae <__mulsf3x>:
 bae:	ca df       	rcall	.-108    	; 0xb44 <__fp_split3>
 bb0:	a0 f3       	brcs	.-24     	; 0xb9a <__mulsf3+0x4>

00000bb2 <__mulsf3_pse>:
 bb2:	95 9f       	mul	r25, r21
 bb4:	d1 f3       	breq	.-12     	; 0xbaa <__mulsf3+0x14>
 bb6:	95 0f       	add	r25, r21
 bb8:	50 e0       	ldi	r21, 0x00	; 0
 bba:	55 1f       	adc	r21, r21
 bbc:	62 9f       	mul	r22, r18
 bbe:	f0 01       	movw	r30, r0
 bc0:	72 9f       	mul	r23, r18
 bc2:	bb 27       	eor	r27, r27
 bc4:	f0 0d       	add	r31, r0
 bc6:	b1 1d       	adc	r27, r1
 bc8:	63 9f       	mul	r22, r19
 bca:	aa 27       	eor	r26, r26
 bcc:	f0 0d       	add	r31, r0
 bce:	b1 1d       	adc	r27, r1
 bd0:	aa 1f       	adc	r26, r26
 bd2:	64 9f       	mul	r22, r20
 bd4:	66 27       	eor	r22, r22
 bd6:	b0 0d       	add	r27, r0
 bd8:	a1 1d       	adc	r26, r1
 bda:	66 1f       	adc	r22, r22
 bdc:	82 9f       	mul	r24, r18
 bde:	22 27       	eor	r18, r18
 be0:	b0 0d       	add	r27, r0
 be2:	a1 1d       	adc	r26, r1
 be4:	62 1f       	adc	r22, r18
 be6:	73 9f       	mul	r23, r19
 be8:	b0 0d       	add	r27, r0
 bea:	a1 1d       	adc	r26, r1
 bec:	62 1f       	adc	r22, r18
 bee:	83 9f       	mul	r24, r19
 bf0:	a0 0d       	add	r26, r0
 bf2:	61 1d       	adc	r22, r1
 bf4:	22 1f       	adc	r18, r18
 bf6:	74 9f       	mul	r23, r20
 bf8:	33 27       	eor	r19, r19
 bfa:	a0 0d       	add	r26, r0
 bfc:	61 1d       	adc	r22, r1
 bfe:	23 1f       	adc	r18, r19
 c00:	84 9f       	mul	r24, r20
 c02:	60 0d       	add	r22, r0
 c04:	21 1d       	adc	r18, r1
 c06:	82 2f       	mov	r24, r18
 c08:	76 2f       	mov	r23, r22
 c0a:	6a 2f       	mov	r22, r26
 c0c:	11 24       	eor	r1, r1
 c0e:	9f 57       	subi	r25, 0x7F	; 127
 c10:	50 40       	sbci	r21, 0x00	; 0
 c12:	8a f0       	brmi	.+34     	; 0xc36 <__mulsf3_pse+0x84>
 c14:	e1 f0       	breq	.+56     	; 0xc4e <__mulsf3_pse+0x9c>
 c16:	88 23       	and	r24, r24
 c18:	4a f0       	brmi	.+18     	; 0xc2c <__mulsf3_pse+0x7a>
 c1a:	ee 0f       	add	r30, r30
 c1c:	ff 1f       	adc	r31, r31
 c1e:	bb 1f       	adc	r27, r27
 c20:	66 1f       	adc	r22, r22
 c22:	77 1f       	adc	r23, r23
 c24:	88 1f       	adc	r24, r24
 c26:	91 50       	subi	r25, 0x01	; 1
 c28:	50 40       	sbci	r21, 0x00	; 0
 c2a:	a9 f7       	brne	.-22     	; 0xc16 <__mulsf3_pse+0x64>
 c2c:	9e 3f       	cpi	r25, 0xFE	; 254
 c2e:	51 05       	cpc	r21, r1
 c30:	70 f0       	brcs	.+28     	; 0xc4e <__mulsf3_pse+0x9c>
 c32:	60 cf       	rjmp	.-320    	; 0xaf4 <__fp_inf>
 c34:	aa cf       	rjmp	.-172    	; 0xb8a <__fp_szero>
 c36:	5f 3f       	cpi	r21, 0xFF	; 255
 c38:	ec f3       	brlt	.-6      	; 0xc34 <__mulsf3_pse+0x82>
 c3a:	98 3e       	cpi	r25, 0xE8	; 232
 c3c:	dc f3       	brlt	.-10     	; 0xc34 <__mulsf3_pse+0x82>
 c3e:	86 95       	lsr	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	b7 95       	ror	r27
 c46:	f7 95       	ror	r31
 c48:	e7 95       	ror	r30
 c4a:	9f 5f       	subi	r25, 0xFF	; 255
 c4c:	c1 f7       	brne	.-16     	; 0xc3e <__mulsf3_pse+0x8c>
 c4e:	fe 2b       	or	r31, r30
 c50:	88 0f       	add	r24, r24
 c52:	91 1d       	adc	r25, r1
 c54:	96 95       	lsr	r25
 c56:	87 95       	ror	r24
 c58:	97 f9       	bld	r25, 7
 c5a:	08 95       	ret

00000c5c <__mulsi3>:
 c5c:	db 01       	movw	r26, r22
 c5e:	8f 93       	push	r24
 c60:	9f 93       	push	r25
 c62:	4f d0       	rcall	.+158    	; 0xd02 <__muluhisi3>
 c64:	bf 91       	pop	r27
 c66:	af 91       	pop	r26
 c68:	a2 9f       	mul	r26, r18
 c6a:	80 0d       	add	r24, r0
 c6c:	91 1d       	adc	r25, r1
 c6e:	a3 9f       	mul	r26, r19
 c70:	90 0d       	add	r25, r0
 c72:	b2 9f       	mul	r27, r18
 c74:	90 0d       	add	r25, r0
 c76:	11 24       	eor	r1, r1
 c78:	08 95       	ret

00000c7a <__divmodhi4>:
 c7a:	97 fb       	bst	r25, 7
 c7c:	07 2e       	mov	r0, r23
 c7e:	16 f4       	brtc	.+4      	; 0xc84 <__divmodhi4+0xa>
 c80:	00 94       	com	r0
 c82:	06 d0       	rcall	.+12     	; 0xc90 <__divmodhi4_neg1>
 c84:	77 fd       	sbrc	r23, 7
 c86:	08 d0       	rcall	.+16     	; 0xc98 <__divmodhi4_neg2>
 c88:	46 d0       	rcall	.+140    	; 0xd16 <__udivmodhi4>
 c8a:	07 fc       	sbrc	r0, 7
 c8c:	05 d0       	rcall	.+10     	; 0xc98 <__divmodhi4_neg2>
 c8e:	3e f4       	brtc	.+14     	; 0xc9e <__divmodhi4_exit>

00000c90 <__divmodhi4_neg1>:
 c90:	90 95       	com	r25
 c92:	81 95       	neg	r24
 c94:	9f 4f       	sbci	r25, 0xFF	; 255
 c96:	08 95       	ret

00000c98 <__divmodhi4_neg2>:
 c98:	70 95       	com	r23
 c9a:	61 95       	neg	r22
 c9c:	7f 4f       	sbci	r23, 0xFF	; 255

00000c9e <__divmodhi4_exit>:
 c9e:	08 95       	ret

00000ca0 <__udivmodsi4>:
 ca0:	a1 e2       	ldi	r26, 0x21	; 33
 ca2:	1a 2e       	mov	r1, r26
 ca4:	aa 1b       	sub	r26, r26
 ca6:	bb 1b       	sub	r27, r27
 ca8:	fd 01       	movw	r30, r26
 caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__udivmodsi4_ep>

00000cac <__udivmodsi4_loop>:
 cac:	aa 1f       	adc	r26, r26
 cae:	bb 1f       	adc	r27, r27
 cb0:	ee 1f       	adc	r30, r30
 cb2:	ff 1f       	adc	r31, r31
 cb4:	a2 17       	cp	r26, r18
 cb6:	b3 07       	cpc	r27, r19
 cb8:	e4 07       	cpc	r30, r20
 cba:	f5 07       	cpc	r31, r21
 cbc:	20 f0       	brcs	.+8      	; 0xcc6 <__udivmodsi4_ep>
 cbe:	a2 1b       	sub	r26, r18
 cc0:	b3 0b       	sbc	r27, r19
 cc2:	e4 0b       	sbc	r30, r20
 cc4:	f5 0b       	sbc	r31, r21

00000cc6 <__udivmodsi4_ep>:
 cc6:	66 1f       	adc	r22, r22
 cc8:	77 1f       	adc	r23, r23
 cca:	88 1f       	adc	r24, r24
 ccc:	99 1f       	adc	r25, r25
 cce:	1a 94       	dec	r1
 cd0:	69 f7       	brne	.-38     	; 0xcac <__udivmodsi4_loop>
 cd2:	60 95       	com	r22
 cd4:	70 95       	com	r23
 cd6:	80 95       	com	r24
 cd8:	90 95       	com	r25
 cda:	9b 01       	movw	r18, r22
 cdc:	ac 01       	movw	r20, r24
 cde:	bd 01       	movw	r22, r26
 ce0:	cf 01       	movw	r24, r30
 ce2:	08 95       	ret

00000ce4 <__umulhisi3>:
 ce4:	a2 9f       	mul	r26, r18
 ce6:	b0 01       	movw	r22, r0
 ce8:	b3 9f       	mul	r27, r19
 cea:	c0 01       	movw	r24, r0
 cec:	a3 9f       	mul	r26, r19
 cee:	70 0d       	add	r23, r0
 cf0:	81 1d       	adc	r24, r1
 cf2:	11 24       	eor	r1, r1
 cf4:	91 1d       	adc	r25, r1
 cf6:	b2 9f       	mul	r27, r18
 cf8:	70 0d       	add	r23, r0
 cfa:	81 1d       	adc	r24, r1
 cfc:	11 24       	eor	r1, r1
 cfe:	91 1d       	adc	r25, r1
 d00:	08 95       	ret

00000d02 <__muluhisi3>:
 d02:	f0 df       	rcall	.-32     	; 0xce4 <__umulhisi3>
 d04:	a5 9f       	mul	r26, r21
 d06:	90 0d       	add	r25, r0
 d08:	b4 9f       	mul	r27, r20
 d0a:	90 0d       	add	r25, r0
 d0c:	a4 9f       	mul	r26, r20
 d0e:	80 0d       	add	r24, r0
 d10:	91 1d       	adc	r25, r1
 d12:	11 24       	eor	r1, r1
 d14:	08 95       	ret

00000d16 <__udivmodhi4>:
 d16:	aa 1b       	sub	r26, r26
 d18:	bb 1b       	sub	r27, r27
 d1a:	51 e1       	ldi	r21, 0x11	; 17
 d1c:	07 c0       	rjmp	.+14     	; 0xd2c <__udivmodhi4_ep>

00000d1e <__udivmodhi4_loop>:
 d1e:	aa 1f       	adc	r26, r26
 d20:	bb 1f       	adc	r27, r27
 d22:	a6 17       	cp	r26, r22
 d24:	b7 07       	cpc	r27, r23
 d26:	10 f0       	brcs	.+4      	; 0xd2c <__udivmodhi4_ep>
 d28:	a6 1b       	sub	r26, r22
 d2a:	b7 0b       	sbc	r27, r23

00000d2c <__udivmodhi4_ep>:
 d2c:	88 1f       	adc	r24, r24
 d2e:	99 1f       	adc	r25, r25
 d30:	5a 95       	dec	r21
 d32:	a9 f7       	brne	.-22     	; 0xd1e <__udivmodhi4_loop>
 d34:	80 95       	com	r24
 d36:	90 95       	com	r25
 d38:	bc 01       	movw	r22, r24
 d3a:	cd 01       	movw	r24, r26
 d3c:	08 95       	ret

00000d3e <_exit>:
 d3e:	f8 94       	cli

00000d40 <__stop_program>:
 d40:	ff cf       	rjmp	.-2      	; 0xd40 <__stop_program>
